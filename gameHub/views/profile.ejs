<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

    <style>
        @keyframes kenburns {
            0% {
                transform: scale(1) translate(0, 0);
                opacity: 0;
            }

            10% {
                opacity: 1;
            }

            90% {
                opacity: 1;
            }

            100% {
                transform: scale(1.1) translate(-3%, -3%);
                opacity: 0;
            }
        }

        .kenburns-image {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-size: cover;
            background-position: center;
            animation: kenburns 30s ease-in-out infinite;
            opacity: 0;
            filter: brightness(1.3);
            z-index: 0;
        }

        .kenburns-image:nth-child(1) {
            animation-delay: 0s;
        }

        .kenburns-image:nth-child(2) {
            animation-delay: 3s;
        }

        .kenburns-image:nth-child(3) {
            animation-delay: 6s;
        }

        .kenburns-image:nth-child(4) {
            animation-delay: 9s;
        }

        .kenburns-image:nth-child(5) {
            animation-delay: 12s;
        }

        .kenburns-image:nth-child(6) {
            animation-delay: 15s;
        }

        .kenburns-image:nth-child(7) {
            animation-delay: 18s;
        }

        .kenburns-image:nth-child(8) {
            animation-delay: 21s;
        }

        .kenburns-image:nth-child(9) {
            animation-delay: 24s;
        }

        .kenburns-image:nth-child(10) {
            animation-delay: 27s;
        }
    </style>
</head>

<body class="relative bg-gray-100 font-sans text-gray-800">

    <!-- Ken Burns Background -->
    <div id="kenburns-bg-wrapper" class="fixed inset-0 z-0 overflow-hidden"></div>
    <!-- Dark overlay to soften background brightness -->
    <div class="fixed inset-0 bg-black/70 z-10 pointer-events-none"></div>

    <div class="relative z-20">
        <!-- Navigation bar -->
        <div class="flex flex-row justify-center pt-2 pb-2 text-md text-white space-x-5 bg-[#000000] relative z-10">
            <button class="px-3" onclick="window.location.href='/home'">
                Home
            </button>
            <button class="px-3" onclick="window.location.href='/profile'">
                Profile
            </button>
            <button class="px-3" onclick="window.location.href='/help'">
                Help
            </button>
            <form class="px-3" action="/logout">
                <input type="submit" value="Logout" />
            </form>
        </div>
    </div>

    <div class="relative z-10 flex flex-row mx-auto  justify-center max-w-3xl pt-5">
        <div class="space-y-4 px-5 py-3 bg-white shadow rounded-lg">
            <div class=" flex flex-row justify-center">
                <h1 class="text-2xl font-bold text-center ">Your Profile</h1>
            </div>
            <div>

                <p>Username: <span class="text-slate-400">
                        <%= username %>
                    </span>
                </p>
            </div>




            <p>Role: <span class="text-slate-400">
                    <%= role %>
                </span>
            <div class="flex flex-row justify-between">
                <form action="/editDisplayName" method="post">
                    <label>Display Name: </label>
                    <input name="displayName" placeholder="Display Name" value="<%= displayName %>"
                        class="px-3 py-1 rounded border text-slate-400">
                    <button type="submit"
                        class="bg-slate-700 px-4 py-2 rounded-lg text-white hover:bg-slate-500  shadow-md transition transform hover:scale-101 active:scale-98">
                        Save changes
                    </button>
                </form>
            </div>

            <div class="flex flex-box justify-between">
                <p>Region:
                    <span class="text-slate-400" id="location">Your region will appear here.</span>
                </p>
                </p>
                <form action="" method="post">
                    <button type="button"
                        class="bg-slate-700 px-4 py-2 rounded-lg text-white hover:bg-slate-500 transition hover:scale-[1.01] ease-in-out shadow-md"
                        onclick="getLocation()">
                        Find location
                    </button>
                </form>
            </div>
            <div class="flex flex-row justify-center">
                <button onclick="window.location.href='/home'"
                    class=" bg-red-500 hover:bg-red-400 text-white px-6 py-2 rounded shadow-md transition hover:scale-[1.01] ease-in-out">
                    Home
                </button>
            </div>






        </div>
    </div>


    <script>
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    const region = getRegion(lat, lon);

                    document.getElementById("location").innerText = region;

                    // Send to backend
                    try {
                        const res = await fetch("/profile", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ location: region })
                        });

                        if (res.ok) {
                            console.log("Region sent successfully");
                        } else {
                            console.error("Failed to send region");
                        }
                    } catch (err) {
                        console.error("Error sending location:", err);
                    }
                }, showError);
            } else {
                document.getElementById("location").innerText = "Geolocation is not supported by this browser.";
            }
        }

        // function showPosition(position) {
        //     const lat = position.coords.latitude;
        //     const lon = position.coords.longitude;
        //     const region = getRegion(lat, lon);
        //     document.getElementById("location").innerText = `${region}`;
        // }

        function getRegion(lat, lon) {
            if (lat >= 15 && lat <= 72 && lon >= -170 && lon <= -50) {
                return "North America";
            } else if (lat >= -60 && lat <= 15 && lon >= -90 && lon <= -30) {
                return "South America";
            } else if (lat >= 35 && lat <= 70 && lon >= -10 && lon <= 60) {
                return "Europe";
            } else if (lat >= 5 && lat <= 80 && lon >= 60 && lon <= 180) {
                return "Asia";
            } else if (lat >= -50 && lat <= 0 && lon >= 110 && lon <= 180) {
                return "Oceania";
            } else {
                return "Unknown Region";
            }
        }

        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    document.getElementById("location").innerText = "User denied the request for Geolocation.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    document.getElementById("location").innerText = "Location information is unavailable.";
                    break;
                case error.TIMEOUT:
                    document.getElementById("location").innerText = "The request to get user location timed out.";
                    break;
                case error.UNKNOWN_ERROR:
                    document.getElementById("location").innerText = "An unknown error occurred.";
                    break;
            }
        }

        const apiKey = 'f61c15c68f3246a3aeebcfa53cdef84f';
        const wrapper = document.getElementById('kenburns-bg-wrapper');

        fetch(`https://api.rawg.io/api/games?key=${apiKey}&tags=multiplayer,co-op&page_size=10&page=4`)
            .then((res) => res.json())
            .then((data) => {
                data.results.forEach((game) => {
                    if (game.background_image) {
                        const bg = document.createElement('div');
                        bg.className = 'kenburns-image';
                        bg.style.backgroundImage = `url(${game.background_image})`;
                        wrapper.appendChild(bg);
                    }
                });
            });

    </script>
</body>

</html>